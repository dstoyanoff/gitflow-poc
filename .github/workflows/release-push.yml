on:
  push:
    branches:
      - release/*

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

name: Push to Release

jobs:
  update-release:
    name: Update Release
    runs-on: ubuntu-latest
    steps:
      - name: Find previous release
        id: prev_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            return release.data.name;
      - name: Get release
        id: release
        uses: actions/github-script@v6
        env:
          REF: ${{ github.ref }}
          PREV_RELEASE: ${{ steps.prev_release.outputs.result }}
        with:
          script: |
            const ref = JSON.parse(process.env.REF);
            const prevRelease = JSON.parse(process.env.PREV_RELEASE);
            const version = ref.split("release/")[1];
            
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: version
            });
            
            const releaseNotes = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              target_commitish: `release/${version}`,
              previous_tag_name: 
            });
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              tag_name: version,
              body: releaseNotes.data.body 
            });
